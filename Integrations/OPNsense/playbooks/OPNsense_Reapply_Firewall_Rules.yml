id: 9b8d4da2-d190-4fa8-8e16-c71b241c9dcc
version: 34
name: OPNsense Reapply Firewall Rules
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: 1ef2d5be-e129-46cf-82d8-2146f090b06b
    type: start
    task:
      id: 1ef2d5be-e129-46cf-82d8-2146f090b06b
      version: -1
      name: ""
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "3"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 620,
          "y": 420
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "3":
    id: "3"
    taskid: f6d40366-5de3-4b57-8cc3-a809f2a05523
    type: regular
    task:
      id: f6d40366-5de3-4b57-8cc3-a809f2a05523
      version: -1
      name: AssignAnalystToIncident
      description: |-
        Assign analyst to incident.
        By default,  the analyst is picked randomly from the available users, according to the provided roles (if no roles provided, will fetch all users).
        Otherwise, the analyst will be picked according to the 'assignBy' arguments.
        machine-learning: DBot will calculated and decide who is the best analyst for the job.
        top-user: The user that is most commonly owns this type of incident
        less-busy-user: The less busy analyst will be picked to be the incident owner.
        online: The analyst is picked randomly from all online analysts, according to the provided roles (if no roles provided, will fetch all users).
        current: The user that executed the command
      scriptName: AssignAnalystToIncident
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "4"
    scriptarguments:
      assignBy:
        simple: random
      email: {}
      roles: {}
      username:
        simple: adam.burt
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 620,
          "y": 590
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "4":
    id: "4"
    taskid: c2c9e242-4d4f-48e5-89d3-d165096cde5f
    type: condition
    task:
      id: c2c9e242-4d4f-48e5-89d3-d165096cde5f
      version: -1
      name: Do you want to add IPs and reapply firewall?
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      '#default#':
      - "9"
      "Yes":
      - "15"
    scriptarguments:
      using:
        simple: DFIR Demisto
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 620,
          "y": 740
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    message:
      to:
        simple: ${incident.owner}
      subject:
        simple: Block IPs?
      body:
        complex:
          root: lists
          accessor: IPsToBlock
          transformers:
          - operator: split
            args:
              delimiter:
                value:
                  simple: ','
          - operator: count
          - operator: concat
            args:
              prefix:
                value:
                  simple: "<html><head>\n<meta http-equiv=\"content-type\" content=\"text/html;
                    charset=windows-1252\">\n<title></title>\n</head><body bgcolor=\"#FFFFFF\"
                    text=\"#000000\">\n  <img \nsrc=\"data:image/png;filename=OPNsense_small.png;base64,\"><br>\n
                    \ <br>\n  <span style=\"text-decoration: underline;\"><span style=\"font-size:
                    \n22pt;\"><span style=\"font-weight: bold;\"><span style=\"color:
                    rgb(255, \n139, 9);\">Firewall re-apply</span></span></span></span><br>\n
                    \ <br>\nThere are "
              suffix:
                value:
                  simple: |2-
                     IP addresses in the block list. Would you like to add them
                     to the firewall and re-apply the rules?<br>
                    </body>
                    </html>
      methods:
      - email
      format: html
      bcc: null
      cc: null
      timings:
        retriescount: 2
        retriesinterval: 360
        completeafterreplies: 1
      replyOptions:
      - "Yes"
      - "No"
  "6":
    id: "6"
    taskid: 67f67684-1c8c-4f0b-808f-cd189f46e910
    type: title
    task:
      id: 67f67684-1c8c-4f0b-808f-cd189f46e910
      version: -1
      name: Close Incident
      type: title
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "11"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 300,
          "y": 1665
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "9":
    id: "9"
    taskid: 5912d501-7a93-4dcc-8c41-950ac2382130
    type: regular
    task:
      id: 5912d501-7a93-4dcc-8c41-950ac2382130
      version: -1
      name: Set incident close data
      description: Sets a value into the context with the given context key
      scriptName: Set
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "6"
    scriptarguments:
      append:
        simple: "false"
      key:
        simple: ${incident.closeNotes}
      value:
        simple: ${incident.owner} opted to not block the IPs at this time
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 300,
          "y": 1050
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "10":
    id: "10"
    taskid: 7688bb7e-1300-4a68-8f21-61c44b3be4a5
    type: regular
    task:
      id: 7688bb7e-1300-4a68-8f21-61c44b3be4a5
      version: -1
      name: Set incident close notes
      description: Sets a value into the context with the given context key
      scriptName: Set
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "6"
    scriptarguments:
      append:
        simple: "false"
      key:
        simple: incident.closeNotes
      value:
        simple: "${incident.owner} added IPs to the block list\n \nThe state of the
          firewall reload was:\n \n${OPNsense.Firewall.Reload.Request.Status}"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 960,
          "y": 1260
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "11":
    id: "11"
    taskid: b85baf73-4dd9-43ae-8b0c-ce15533de30c
    type: regular
    task:
      id: b85baf73-4dd9-43ae-8b0c-ce15533de30c
      version: -1
      name: closeInvestigation
      description: Close the current incident
      script: Builtin|||closeInvestigation
      type: regular
      iscommand: true
      brand: Builtin
    scriptarguments:
      assetid: {}
      closeNotes:
        simple: ${incident.closeNotes}
      closeReason:
        simple: Resolved
      id:
        simple: ${incident.id}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 300,
          "y": 1840
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "13":
    id: "13"
    taskid: 0ae6f2b2-f701-453d-8bb3-96183f75d6ca
    type: regular
    task:
      id: 0ae6f2b2-f701-453d-8bb3-96183f75d6ca
      version: -1
      name: opnsense-reload-firewall
      description: Requests that the firewall reloads its rules which includes modified
        Alias lists
      script: OPNsense|||opnsense-reload-firewall
      type: regular
      iscommand: true
      brand: OPNsense
    nexttasks:
      '#none#':
      - "10"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 960,
          "y": 1100
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "15":
    id: "15"
    taskid: b65717e1-9e3e-4411-8856-8c8c58ecdc9a
    type: playbook
    task:
      id: b65717e1-9e3e-4411-8856-8c8c58ecdc9a
      version: -1
      name: OPNsense Add IPs to Alias
      playbookName: OPNsense Add IPs to Alias
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "13"
    scriptarguments:
      alias:
        simple: BlockedSources
      ips:
        simple: ${lists.IPsToBlock}
      list:
        simple: IPsToBlock
    separatecontext: false
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
    view: |-
      {
        "position": {
          "x": 960,
          "y": 940
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 1515,
        "width": 1040,
        "x": 300,
        "y": 420
      }
    }
  }
inputs: []
outputs: []
